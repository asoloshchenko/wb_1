package main

import (
	"fmt"
	"strings"
	"unicode/utf8"
)

// –ö –∫–∞–∫–∏–º –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–º –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è–º –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç –∫–æ–¥–∞,
// –∏ –∫–∞–∫ —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å? –ü—Ä–∏–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–∏–º–µ—Ä —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏.

// –ü—Ä–æ–±–ª–µ–º–∞ 1:
// –°–ª–∞–π—Å —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ –±–æ–ª—å—à–æ–π –±–∞–∑–æ–≤—ã–π –º–∞—Å—Å–∏–≤
// –ü—Ä–æ–±–ª–µ–º–∞ 2:
// justString = v[:100] - –≤–∑—è—Ç–∏–µ –ø–µ—Ä–≤—ã—Ö 100 –±–∞–π—Ç —Å—Ç—Ä–æ–∫–∏,
// –Ω–æ —ç—Ç–æ –Ω–µ —Ä–∞–≤–Ω–æ—Å–∏–ª—å–Ω–æ –ø–µ—Ä–≤—ã–º 100 —Å–∏–º–≤–æ–ª–∞–º
var justString string

func createHugeString(size int) string {
	return strings.Repeat("abc –ü—Ä–∏–≤–µ—Ç üéà", 10000)
}
func someFunc() {
	v := createHugeString(1 << 10)
	start := 0
	runeSlice := make([]rune, 0, 100)
	for i := 0; i < 100; i++ {
		if start >= len(v) {
			break
		}
		r, size := utf8.DecodeRuneInString(v[start:])

		if r == utf8.RuneError {
			break
		}

		runeSlice = append(runeSlice, r)
		start += size
	}
	justString = string(runeSlice)
}

func main() {
	someFunc()
	fmt.Println(justString)
	fmt.Println(len(justString))
	fmt.Println(utf8.RuneCountInString(justString))
}
